{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\OSPanel\\\\domains\\\\projects\\\\react_native\\\\demo2\\\\src\\\\context\\\\listItem\\\\ListState.js\";\nimport React, { useReducer } from 'react';\nimport { ListContext } from \"./ListContext\";\nimport { ListReducer } from \"./ListReducer\";\nimport { ERROR_LIST, LOAD_LIST, LOAD_PAGE_LIST, LOADING_LIST } from \"../types\";\nimport { Http } from \"../../http\";\nexport var ListState = function ListState(_ref) {\n  var children = _ref.children;\n  var initialState = {\n    loading: false,\n    error: null,\n    list: [],\n    page: 0,\n    pages: 0,\n    count: 10,\n    page_list: []\n  };\n\n  var _useReducer = useReducer(ListReducer, initialState),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var get_list = function get_list() {\n    var response, arr, i;\n    return _regeneratorRuntime.async(function get_list$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            loading(true);\n            error_list(null);\n            _context.prev = 2;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(Http.get('https://quotes.instaforex.com/api/quotesList'));\n\n          case 5:\n            response = _context.sent;\n            arr = [];\n\n            for (i = state.page; i < state.page + state.count; i++) {\n              console.log(i);\n              arr.push(response.quotesList[i]);\n            }\n\n            console.log(arr);\n            loading(false);\n            dispatch({\n              type: LOAD_LIST,\n              payload: response.quotesList\n            });\n            dispatch({\n              type: LOAD_PAGE_LIST,\n              arr: arr\n            });\n            _context.next = 19;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](2);\n            console.log(_context.t0);\n            loading(false);\n            error_list('Ошибка загрузки с сервера');\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[2, 14]]);\n  };\n\n  var loading = function loading(type) {\n    dispatch({\n      type: LOADING_LIST,\n      loading: type\n    });\n  };\n\n  var error_list = function error_list(error) {\n    dispatch({\n      type: ERROR_LIST,\n      error: error\n    });\n  };\n\n  return React.createElement(ListContext.Provider, {\n    value: {\n      get_list: get_list,\n      error_list: error_list,\n      list: state\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    }\n  }, children);\n};","map":{"version":3,"sources":["D:/OSPanel/domains/projects/react_native/demo2/src/context/listItem/ListState.js"],"names":["React","useReducer","ListContext","ListReducer","ERROR_LIST","LOAD_LIST","LOAD_PAGE_LIST","LOADING_LIST","Http","ListState","children","initialState","loading","error","list","page","pages","count","page_list","state","dispatch","get_list","error_list","get","response","arr","i","console","log","push","quotesList","type","payload"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,SAAQC,WAAR;AACA,SAAQC,WAAR;AACA,SAAQC,UAAR,EAAoBC,SAApB,EAA+BC,cAA/B,EAA+CC,YAA/C;AACA,SAAQC,IAAR;AAGA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAAgB;AAAA,MAAdC,QAAc,QAAdA,QAAc;AAErC,MAAMC,YAAY,GAAG;AACjBC,IAAAA,OAAO,EAAE,KADQ;AAEjBC,IAAAA,KAAK,EAAE,IAFU;AAGjBC,IAAAA,IAAI,EAAE,EAHW;AAIjBC,IAAAA,IAAI,EAAE,CAJW;AAKjBC,IAAAA,KAAK,EAAE,CALU;AAMjBC,IAAAA,KAAK,EAAE,EANU;AAOjBC,IAAAA,SAAS,EAAC;AAPO,GAArB;;AAFqC,oBAYXjB,UAAU,CAACE,WAAD,EAAcQ,YAAd,CAZC;AAAA;AAAA,MAY9BQ,KAZ8B;AAAA,MAYvBC,QAZuB;;AAcrC,MAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAEbT,YAAAA,OAAO,CAAC,IAAD,CAAP;AACAU,YAAAA,UAAU,CAAC,IAAD,CAAV;AAHa;AAAA;AAAA,6CAKcd,IAAI,CAACe,GAAL,CAAS,8CAAT,CALd;;AAAA;AAKHC,YAAAA,QALG;AAOHC,YAAAA,GAPG,GAOC,EAPD;;AAQT,iBAAQC,CAAR,GAAUP,KAAK,CAACJ,IAAhB,EAAsBW,CAAC,GAAEP,KAAK,CAACJ,IAAN,GAAWI,KAAK,CAACF,KAA1C,EAAkDS,CAAC,EAAnD,EAAsD;AAClDC,cAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACAD,cAAAA,GAAG,CAACI,IAAJ,CAASL,QAAQ,CAACM,UAAT,CAAoBJ,CAApB,CAAT;AACH;;AAEDC,YAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACAb,YAAAA,OAAO,CAAC,KAAD,CAAP;AACAQ,YAAAA,QAAQ,CAAC;AAACW,cAAAA,IAAI,EAAE1B,SAAP;AAAkB2B,cAAAA,OAAO,EAAER,QAAQ,CAACM;AAApC,aAAD,CAAR;AACAV,YAAAA,QAAQ,CAAC;AAACW,cAAAA,IAAI,EAAEzB,cAAP;AAAuBmB,cAAAA,GAAG,EAAHA;AAAvB,aAAD,CAAR;AAhBS;AAAA;;AAAA;AAAA;AAAA;AAkBTE,YAAAA,OAAO,CAACC,GAAR;AACAhB,YAAAA,OAAO,CAAC,KAAD,CAAP;AACAU,YAAAA,UAAU,CAAC,2BAAD,CAAV;;AApBS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAqDA,MAAMV,OAAO,GAAG,SAAVA,OAAU,CAAAmB,IAAI,EAAI;AACpBX,IAAAA,QAAQ,CAAC;AAACW,MAAAA,IAAI,EAAExB,YAAP;AAAqBK,MAAAA,OAAO,EAAEmB;AAA9B,KAAD,CAAR;AACH,GAFD;;AAIA,MAAMT,UAAU,GAAG,SAAbA,UAAa,CAAAT,KAAK,EAAI;AACxBO,IAAAA,QAAQ,CAAC;AAACW,MAAAA,IAAI,EAAE3B,UAAP;AAAmBS,MAAAA,KAAK,EAALA;AAAnB,KAAD,CAAR;AACH,GAFD;;AAGA,SACI,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AACzBQ,MAAAA,QAAQ,EAARA,QADyB;AACfC,MAAAA,UAAU,EAAVA,UADe;AACHR,MAAAA,IAAI,EAAEK;AADH,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,KAGKT,QAHL,CADJ;AAOH,CAjFM","sourcesContent":["import React, {useReducer} from 'react'\r\nimport {ListContext} from './ListContext'\r\nimport {ListReducer} from './ListReducer'\r\nimport {ERROR_LIST, LOAD_LIST, LOAD_PAGE_LIST, LOADING_LIST} from '../types'\r\nimport {Http} from \"../../http\";\r\n//import * as io from \"socket.io-client\";\r\n\r\nexport const ListState = ({children}) => {\r\n\r\n    const initialState = {\r\n        loading: false,\r\n        error: null,\r\n        list: [],\r\n        page: 0,\r\n        pages: 0,\r\n        count: 10,\r\n        page_list:[]\r\n    }\r\n\r\n    const [state, dispatch] = useReducer(ListReducer, initialState)\r\n\r\n    const get_list = async () => {\r\n\r\n        loading(true)\r\n        error_list(null)\r\n        try {\r\n            const response = await Http.get('https://quotes.instaforex.com/api/quotesList')\r\n            //console.log(response.quotesList)\r\n            const arr=[]\r\n            for(let i=state.page; i<(state.page+state.count); i++){\r\n                console.log(i)\r\n                arr.push(response.quotesList[i])\r\n            }\r\n\r\n            console.log(arr)\r\n            loading(false)\r\n            dispatch({type: LOAD_LIST, payload: response.quotesList})\r\n            dispatch({type: LOAD_PAGE_LIST, arr})\r\n        } catch (e) {\r\n            console.log(e)\r\n            loading(false)\r\n            error_list('Ошибка загрузки с сервера')\r\n        }\r\n    }\r\n\r\n    // const get_socket=()=>{\r\n    //     const client =  io('https://qrtm1.ifxid.com:8443');\r\n    //     event(client)\r\n    // }\r\n    //\r\n    //\r\n    // const event=(socket)=>{\r\n    //     socket.on('connect', () => {\r\n    //         console.log('Connect Socket');\r\n    //         socket.emit('subscribe', ['GOLD','USDCAD']);\r\n    //     });\r\n    //     socket.on(\"message\", (msg) => {\r\n    //         console.log(msg);\r\n    //     });\r\n    //     socket.on(\"quotes\", (msg) => {\r\n    //         console.log(msg.msg);\r\n    //     });\r\n    //     socket.on(\"error\", (err) => {\r\n    //         console.log(\"Socket error = \" + err);\r\n    //     });\r\n    //     socket.on(\"disconnect\", (reason) => {\r\n    //         console.log(\"Socket disconnected reason = \" + reason);\r\n    //     });\r\n    //     socket.on('reconnect', (attemptNumber) => {\r\n    //         console.log('Socket reconnect attempt number = ', attemptNumber);\r\n    //     });\r\n    // }\r\n\r\n\r\n    const loading = type => {\r\n        dispatch({type: LOADING_LIST, loading: type})\r\n    }\r\n\r\n    const error_list = error => {\r\n        dispatch({type: ERROR_LIST, error})\r\n    }\r\n    return (\r\n        <ListContext.Provider value={{\r\n            get_list, error_list, list: state\r\n        }}>\r\n            {children}\r\n        </ListContext.Provider>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}