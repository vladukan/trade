{"ast":null,"code":"import Platform from \"react-native-web/dist/exports/Platform\";\nimport ActionSheetIOS from \"react-native-web/dist/exports/ActionSheetIOS\";\nimport UIManager from \"react-native-web/dist/exports/UIManager\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as React from 'react';\n\nvar overflowMenuPressHandlerIOS = function overflowMenuPressHandlerIOS(_ref) {\n  var hiddenButtons = _ref.hiddenButtons,\n      _ref$cancelButtonLabe = _ref.cancelButtonLabel,\n      cancelButtonLabel = _ref$cancelButtonLabe === void 0 ? 'cancel' : _ref$cancelButtonLabe;\n  var actionTitles = hiddenButtons.map(function (btn) {\n    return btn.props.title;\n  });\n  actionTitles.push(cancelButtonLabel);\n  ActionSheetIOS.showActionSheetWithOptions({\n    options: actionTitles,\n    cancelButtonIndex: actionTitles.length - 1\n  }, function (buttonIndex) {\n    if (buttonIndex !== actionTitles.length - 1) {\n      hiddenButtons[buttonIndex].props.onPress();\n    }\n  });\n};\n\nvar overflowMenuPressHandlerAndroid = function overflowMenuPressHandlerAndroid(_ref2) {\n  var hiddenButtons = _ref2.hiddenButtons,\n      overflowButtonRef = _ref2.overflowButtonRef;\n  UIManager.showPopupMenu(findNodeHandle(overflowButtonRef), hiddenButtons.map(function (btn) {\n    return btn.props.title;\n  }), function (err) {\n    return console.debug(\"overflowBtn error\", err);\n  }, function (eventName, index) {\n    if (eventName !== 'itemSelected') return;\n    hiddenButtons[index].props.onPress();\n  });\n};\n\nexport var defaultOnOverflowMenuPress = Platform.select({\n  ios: overflowMenuPressHandlerIOS,\n  android: overflowMenuPressHandlerAndroid,\n  default: function _default() {}\n});","map":{"version":3,"sources":["D:/OSPanel/domains/projects/react_native/demo2/node_modules/react-navigation-header-buttons/src/overflowMenuPressHandlers.js"],"names":["React","overflowMenuPressHandlerIOS","hiddenButtons","cancelButtonLabel","actionTitles","map","btn","props","title","push","ActionSheetIOS","showActionSheetWithOptions","options","cancelButtonIndex","length","buttonIndex","onPress","overflowMenuPressHandlerAndroid","overflowButtonRef","UIManager","showPopupMenu","findNodeHandle","err","console","debug","eventName","index","defaultOnOverflowMenuPress","Platform","select","ios","android","default"],"mappings":";;;;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAQA,IAAMC,2BAA2B,GAAG,SAA9BA,2BAA8B,OAGH;AAAA,MAF/BC,aAE+B,QAF/BA,aAE+B;AAAA,mCAD/BC,iBAC+B;AAAA,MAD/BA,iBAC+B,sCADX,QACW;AAC/B,MAAIC,YAAY,GAAGF,aAAa,CAACG,GAAd,CAAkB,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,KAAJ,CAAUC,KAAd;AAAA,GAArB,CAAnB;AACAJ,EAAAA,YAAY,CAACK,IAAb,CAAkBN,iBAAlB;AAEAO,EAAAA,cAAc,CAACC,0BAAf,CACE;AACEC,IAAAA,OAAO,EAAER,YADX;AAEES,IAAAA,iBAAiB,EAAET,YAAY,CAACU,MAAb,GAAsB;AAF3C,GADF,EAKE,UAACC,WAAD,EAAyB;AACvB,QAAIA,WAAW,KAAKX,YAAY,CAACU,MAAb,GAAsB,CAA1C,EAA6C;AAC3CZ,MAAAA,aAAa,CAACa,WAAD,CAAb,CAA2BR,KAA3B,CAAiCS,OAAjC;AACD;AACF,GATH;AAWD,CAlBD;;AAoBA,IAAMC,+BAA+B,GAAG,SAAlCA,+BAAkC,QAGP;AAAA,MAF/Bf,aAE+B,SAF/BA,aAE+B;AAAA,MAD/BgB,iBAC+B,SAD/BA,iBAC+B;AAC/BC,EAAAA,SAAS,CAACC,aAAV,CACEC,cAAc,CAACH,iBAAD,CADhB,EAEEhB,aAAa,CAACG,GAAd,CAAkB,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,KAAJ,CAAUC,KAAd;AAAA,GAArB,CAFF,EAGE,UAAAc,GAAG;AAAA,WAAIC,OAAO,CAACC,KAAR,sBAAmCF,GAAnC,CAAJ;AAAA,GAHL,EAIE,UAACG,SAAD,EAAoBC,KAApB,EAAsC;AACpC,QAAID,SAAS,KAAK,cAAlB,EAAkC;AAClCvB,IAAAA,aAAa,CAACwB,KAAD,CAAb,CAAqBnB,KAArB,CAA2BS,OAA3B;AACD,GAPH;AASD,CAbD;;AAeA,OAAO,IAAMW,0BAA0B,GAAGC,QAAQ,CAACC,MAAT,CAAgB;AACxDC,EAAAA,GAAG,EAAE7B,2BADmD;AAExD8B,EAAAA,OAAO,EAAEd,+BAF+C;AAGxDe,EAAAA,OAAO,EAAE,oBAAM,CAAE;AAHuC,CAAhB,CAAnC","sourcesContent":["// @flow\nimport { Platform, ActionSheetIOS, UIManager, findNodeHandle, type View } from 'react-native';\nimport * as React from 'react';\n\nexport type OnOverflowMenuPressParams = {\n  hiddenButtons: Array<React.Element<any>>,\n  overflowButtonRef: ?View,\n  cancelButtonLabel?: string,\n};\n\nconst overflowMenuPressHandlerIOS = ({\n  hiddenButtons,\n  cancelButtonLabel = 'cancel',\n}: OnOverflowMenuPressParams) => {\n  let actionTitles = hiddenButtons.map(btn => btn.props.title);\n  actionTitles.push(cancelButtonLabel);\n\n  ActionSheetIOS.showActionSheetWithOptions(\n    {\n      options: actionTitles,\n      cancelButtonIndex: actionTitles.length - 1,\n    },\n    (buttonIndex: number) => {\n      if (buttonIndex !== actionTitles.length - 1) {\n        hiddenButtons[buttonIndex].props.onPress();\n      }\n    }\n  );\n};\n\nconst overflowMenuPressHandlerAndroid = ({\n  hiddenButtons,\n  overflowButtonRef,\n}: OnOverflowMenuPressParams) => {\n  UIManager.showPopupMenu(\n    findNodeHandle(overflowButtonRef),\n    hiddenButtons.map(btn => btn.props.title),\n    err => console.debug(`overflowBtn error`, err),\n    (eventName: string, index: number) => {\n      if (eventName !== 'itemSelected') return;\n      hiddenButtons[index].props.onPress();\n    }\n  );\n};\n\nexport const defaultOnOverflowMenuPress = Platform.select({\n  ios: overflowMenuPressHandlerIOS,\n  android: overflowMenuPressHandlerAndroid,\n  default: () => {},\n});\n"]},"metadata":{},"sourceType":"module"}