{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"D:\\\\OSPanel\\\\domains\\\\projects\\\\react_native\\\\demo2\\\\node_modules\\\\react-navigation-header-buttons\\\\src\\\\HeaderButtons.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport { HeaderButton } from \"./HeaderButton\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { OverflowButton } from \"./OverflowButton\";\nimport { Item } from \"./HeaderItems\";\n\nvar textTransformer = function textTransformer(label) {\n  return Platform.OS === 'ios' ? label.charAt(0).toUpperCase() + label.substr(1) : label.toUpperCase();\n};\n\nexport var HeaderButtons = function (_React$Component) {\n  _inherits(HeaderButtons, _React$Component);\n\n  function HeaderButtons() {\n    _classCallCheck(this, HeaderButtons);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(HeaderButtons).apply(this, arguments));\n  }\n\n  _createClass(HeaderButtons, [{\n    key: \"render\",\n    value: function render() {\n      var _getVisibleAndHiddenB = getVisibleAndHiddenButtons(this.props),\n          visibleButtons = _getVisibleAndHiddenB.visibleButtons,\n          hiddenButtons = _getVisibleAndHiddenB.hiddenButtons;\n\n      var _this$props = this.props,\n          OverflowIcon = _this$props.OverflowIcon,\n          overflowButtonWrapperStyle = _this$props.overflowButtonWrapperStyle,\n          onOverflowMenuPress = _this$props.onOverflowMenuPress,\n          overflowButtonTestID = _this$props.overflowButtonTestID;\n      return React.createElement(View, {\n        style: [styles.row, this.getEdgeMargin()],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        }\n      }, visibleButtons.length > 0 && this.renderVisibleButtons(visibleButtons), hiddenButtons.length > 0 && React.createElement(OverflowButton, {\n        hiddenButtons: hiddenButtons,\n        OverflowIcon: OverflowIcon,\n        buttonWrapperStyle: overflowButtonWrapperStyle,\n        onOverflowMenuPress: onOverflowMenuPress,\n        testID: overflowButtonTestID,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        }\n      }));\n    }\n  }, {\n    key: \"getEdgeMargin\",\n    value: function getEdgeMargin() {\n      return this.props.left ? styles.extraEdgeMarginOnLeft : styles.extraEdgeMarginOnRight;\n    }\n  }, {\n    key: \"renderVisibleButtons\",\n    value: function renderVisibleButtons(visibleButtons) {\n      var _this = this;\n\n      return visibleButtons.map(function (btn) {\n        var title = btn.props.title;\n        var RenderedHeaderButton = _this.props.HeaderButtonComponent;\n        return React.createElement(RenderedHeaderButton, _extends({\n          key: title\n        }, btn.props, {\n          getButtonElement: renderVisibleButton,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          }\n        }));\n      });\n    }\n  }]);\n\n  return HeaderButtons;\n}(React.Component);\nHeaderButtons.Item = Item;\nHeaderButtons.defaultProps = {\n  left: false,\n  HeaderButtonComponent: HeaderButton,\n  OverflowIcon: React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    }\n  })\n};\n\nfunction getVisibleAndHiddenButtons(props) {\n  var visibleButtons = [];\n  var hiddenButtons = [];\n  React.Children.forEach(props.children, function (child) {\n    if (child && typeof child === 'object') {\n      if (!child.props.show || child.props.show === Item.SHOW_ALWAYS) {\n        visibleButtons.push(child);\n      } else {\n        hiddenButtons.push(child);\n      }\n    }\n  });\n  return {\n    visibleButtons: visibleButtons,\n    hiddenButtons: hiddenButtons\n  };\n}\n\nfunction renderVisibleButton(visibleButtonProps) {\n  var IconComponent = visibleButtonProps.IconComponent,\n      iconSize = visibleButtonProps.iconSize,\n      color = visibleButtonProps.color,\n      iconName = visibleButtonProps.iconName,\n      title = visibleButtonProps.title,\n      buttonStyle = visibleButtonProps.buttonStyle;\n  return IconComponent && iconName ? React.createElement(IconComponent, {\n    name: iconName,\n    color: color,\n    size: iconSize,\n    style: [styles.button, buttonStyle],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    }\n  }) : React.createElement(Text, {\n    style: [styles.text, {\n      color: color\n    }, buttonStyle],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    }\n  }, textTransformer(title));\n}\n\nvar styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row'\n  },\n  extraEdgeMarginOnLeft: _objectSpread({}, Platform.select({\n    android: {\n      marginLeft: 5\n    },\n    default: {\n      marginLeft: 4\n    }\n  })),\n  extraEdgeMarginOnRight: _objectSpread({}, Platform.select({\n    android: {\n      marginRight: 4\n    },\n    default: {\n      marginRight: 5\n    }\n  })),\n  text: _objectSpread({}, Platform.select({\n    android: {\n      fontFamily: 'sans-serif-medium',\n      fontSize: 14,\n      marginHorizontal: 11\n    },\n    default: {\n      fontSize: 17,\n      marginHorizontal: 10\n    }\n  })),\n  button: {\n    marginHorizontal: 11\n  }\n});","map":{"version":3,"sources":["D:/OSPanel/domains/projects/react_native/demo2/node_modules/react-navigation-header-buttons/src/HeaderButtons.js"],"names":["React","HeaderButton","OverflowButton","Item","textTransformer","label","Platform","OS","charAt","toUpperCase","substr","HeaderButtons","getVisibleAndHiddenButtons","props","visibleButtons","hiddenButtons","OverflowIcon","overflowButtonWrapperStyle","onOverflowMenuPress","overflowButtonTestID","styles","row","getEdgeMargin","length","renderVisibleButtons","left","extraEdgeMarginOnLeft","extraEdgeMarginOnRight","map","btn","title","RenderedHeaderButton","HeaderButtonComponent","renderVisibleButton","Component","defaultProps","Children","forEach","children","child","show","SHOW_ALWAYS","push","visibleButtonProps","IconComponent","iconSize","color","iconName","buttonStyle","button","text","StyleSheet","create","flexDirection","select","android","marginLeft","default","marginRight","fontFamily","fontSize","marginHorizontal"],"mappings":"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","sourcesContent":["/*\n * @flow\n */\nimport * as React from 'react';\nimport { HeaderButton, type HeaderButtonProps, type VisibleButtonProps } from './HeaderButton';\nimport { StyleSheet, Platform, View, Text } from 'react-native';\nimport { OverflowButton, type OverflowButtonProps } from './OverflowButton';\nimport type { ViewStyleProp } from 'react-native/Libraries/StyleSheet/StyleSheet';\nimport { Item } from './HeaderItems';\n\nconst textTransformer = (label: string) =>\n  Platform.OS === 'ios' ? label.charAt(0).toUpperCase() + label.substr(1) : label.toUpperCase();\n\ntype HeaderButtonsProps = {\n  children: React.Node,\n  left: boolean,\n  overflowButtonWrapperStyle?: ViewStyleProp,\n  overflowButtonTestID?: string,\n  HeaderButtonComponent: React.ComponentType<any>,\n  ...$Exact<OverflowButtonProps>,\n};\n\nexport class HeaderButtons extends React.Component<HeaderButtonsProps> {\n  static Item = Item;\n  static defaultProps = {\n    left: false,\n    HeaderButtonComponent: HeaderButton,\n    OverflowIcon: <View />,\n  };\n\n  render() {\n    const { visibleButtons, hiddenButtons } = getVisibleAndHiddenButtons(this.props);\n    const {\n      OverflowIcon,\n      overflowButtonWrapperStyle,\n      onOverflowMenuPress,\n      overflowButtonTestID,\n    } = this.props;\n\n    return (\n      <View style={[styles.row, this.getEdgeMargin()]}>\n        {visibleButtons.length > 0 && this.renderVisibleButtons(visibleButtons)}\n        {hiddenButtons.length > 0 && (\n          <OverflowButton\n            hiddenButtons={hiddenButtons}\n            OverflowIcon={OverflowIcon}\n            buttonWrapperStyle={overflowButtonWrapperStyle}\n            onOverflowMenuPress={onOverflowMenuPress}\n            testID={overflowButtonTestID}\n          />\n        )}\n      </View>\n    );\n  }\n\n  getEdgeMargin() {\n    return this.props.left ? styles.extraEdgeMarginOnLeft : styles.extraEdgeMarginOnRight;\n  }\n\n  renderVisibleButtons(visibleButtons: Array<React.Element<any>>): Array<React.Element<any>> {\n    return visibleButtons.map(btn => {\n      const {\n        props: { title },\n      } = btn;\n\n      const RenderedHeaderButton = this.props.HeaderButtonComponent;\n\n      return (\n        <RenderedHeaderButton key={title} {...btn.props} getButtonElement={renderVisibleButton} />\n      );\n    });\n  }\n}\n\nfunction getVisibleAndHiddenButtons(props) {\n  let visibleButtons = [];\n  let hiddenButtons = [];\n\n  React.Children.forEach(props.children, child => {\n    if (child && typeof child === 'object') {\n      // TODO implement ifRoom, which will be tricky\n      if (!child.props.show || child.props.show === Item.SHOW_ALWAYS) {\n        visibleButtons.push(child);\n      } else {\n        hiddenButtons.push(child);\n      }\n    }\n  });\n\n  return {\n    visibleButtons,\n    hiddenButtons,\n  };\n}\n\nfunction renderVisibleButton(visibleButtonProps: VisibleButtonProps): React.Element<any> {\n  const { IconComponent, iconSize, color, iconName, title, buttonStyle } = visibleButtonProps;\n\n  return IconComponent && iconName ? (\n    <IconComponent\n      name={iconName}\n      color={color}\n      size={iconSize}\n      style={[styles.button, buttonStyle]}\n    />\n  ) : (\n    <Text style={[styles.text, { color }, buttonStyle]}>{textTransformer(title)}</Text>\n  );\n}\n\nconst styles = StyleSheet.create({\n  row: { flexDirection: 'row' },\n  extraEdgeMarginOnLeft: {\n    ...Platform.select({\n      android: {\n        marginLeft: 5,\n      },\n      default: {\n        marginLeft: 4,\n      },\n    }),\n  },\n  extraEdgeMarginOnRight: {\n    ...Platform.select({\n      android: {\n        marginRight: 4,\n      },\n      default: {\n        marginRight: 5,\n      },\n    }),\n  },\n  text: {\n    ...Platform.select({\n      android: {\n        fontFamily: 'sans-serif-medium',\n        fontSize: 14,\n        marginHorizontal: 11,\n      },\n      default: {\n        fontSize: 17,\n        marginHorizontal: 10,\n      },\n    }),\n  },\n  button: {\n    marginHorizontal: 11,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}