{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/satya/Workspace/Callstack/react-navigation-drawer/src/views/DrawerView.tsx\";\nimport * as React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { SceneView, ThemeColors, ThemeContext } from 'react-navigation';\nimport { ScreenContainer } from 'react-native-screens';\nimport * as DrawerActions from \"../routers/DrawerActions\";\nimport DrawerSidebar from \"./DrawerSidebar\";\nimport DrawerGestureContext from \"../utils/DrawerGestureContext\";\nimport ResourceSavingScene from \"./ResourceSavingScene\";\nimport Drawer from \"./Drawer\";\n\nvar DrawerView = function (_React$PureComponent) {\n  _inherits(DrawerView, _React$PureComponent);\n\n  function DrawerView() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DrawerView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DrawerView)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      loaded: [_this.props.navigation.state.index],\n      drawerWidth: typeof _this.props.navigationConfig.drawerWidth === 'function' ? _this.props.navigationConfig.drawerWidth() : _this.props.navigationConfig.drawerWidth\n    };\n    _this.drawerGestureRef = React.createRef();\n\n    _this.handleDrawerOpen = function () {\n      var navigation = _this.props.navigation;\n      navigation.dispatch(DrawerActions.openDrawer({\n        key: navigation.state.key\n      }));\n    };\n\n    _this.handleDrawerClose = function () {\n      var navigation = _this.props.navigation;\n      navigation.dispatch(DrawerActions.closeDrawer({\n        key: navigation.state.key\n      }));\n    };\n\n    _this.updateWidth = function () {\n      var drawerWidth = typeof _this.props.navigationConfig.drawerWidth === 'function' ? _this.props.navigationConfig.drawerWidth() : _this.props.navigationConfig.drawerWidth;\n\n      if (_this.state.drawerWidth !== drawerWidth) {\n        _this.setState({\n          drawerWidth: drawerWidth\n        });\n      }\n    };\n\n    _this.renderNavigationView = function (_ref) {\n      var progress = _ref.progress;\n      return React.createElement(DrawerSidebar, _extends({\n        screenProps: _this.props.screenProps,\n        drawerOpenProgress: progress,\n        navigation: _this.props.navigation,\n        descriptors: _this.props.descriptors,\n        contentComponent: _this.props.navigationConfig.contentComponent,\n        contentOptions: _this.props.navigationConfig.contentOptions,\n        drawerPosition: _this.props.navigationConfig.drawerPosition,\n        style: _this.props.navigationConfig.style\n      }, _this.props.navigationConfig, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        }\n      }));\n    };\n\n    _this.renderContent = function () {\n      var _this$props = _this.props,\n          lazy = _this$props.lazy,\n          navigation = _this$props.navigation;\n      var loaded = _this.state.loaded;\n      var routes = navigation.state.routes;\n\n      if (_this.props.navigationConfig.unmountInactiveRoutes) {\n        var activeKey = navigation.state.routes[navigation.state.index].key;\n        var descriptor = _this.props.descriptors[activeKey];\n        return React.createElement(SceneView, {\n          navigation: descriptor.navigation,\n          screenProps: _this.props.screenProps,\n          component: descriptor.getComponent(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          }\n        });\n      } else {\n        return React.createElement(ScreenContainer, {\n          style: styles.content,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          }\n        }, routes.map(function (route, index) {\n          if (lazy && !loaded.includes(index)) {\n            return null;\n          }\n\n          var isFocused = navigation.state.index === index;\n          var descriptor = _this.props.descriptors[route.key];\n          return React.createElement(ResourceSavingScene, {\n            key: route.key,\n            style: [StyleSheet.absoluteFill, {\n              opacity: isFocused ? 1 : 0\n            }],\n            isVisible: isFocused,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 175\n            }\n          }, React.createElement(SceneView, {\n            navigation: descriptor.navigation,\n            screenProps: _this.props.screenProps,\n            component: descriptor.getComponent(),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 183\n            }\n          }));\n        }));\n      }\n    };\n\n    _this.setDrawerGestureRef = function (ref) {\n      _this.drawerGestureRef.current = ref;\n    };\n\n    return _this;\n  }\n\n  _createClass(DrawerView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      Dimensions.addEventListener('change', this.updateWidth);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      Dimensions.removeEventListener('change', this.updateWidth);\n    }\n  }, {\n    key: \"getDrawerBackgroundColor\",\n    value: function getDrawerBackgroundColor() {\n      var drawerBackgroundColor = this.props.navigationConfig.drawerBackgroundColor;\n\n      if (drawerBackgroundColor) {\n        return typeof drawerBackgroundColor === 'string' ? drawerBackgroundColor : drawerBackgroundColor[this.context];\n      } else {\n        return ThemeColors[this.context].bodyContent;\n      }\n    }\n  }, {\n    key: \"getOverlayColor\",\n    value: function getOverlayColor() {\n      var overlayColor = this.props.navigationConfig.overlayColor;\n\n      if (overlayColor) {\n        return typeof overlayColor === 'string' ? overlayColor : overlayColor[this.context];\n      } else {\n        return 'rgba(0,0,0,0.5)';\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var navigation = this.props.navigation;\n      var _this$props$navigatio = this.props.navigationConfig,\n          drawerType = _this$props$navigatio.drawerType,\n          sceneContainerStyle = _this$props$navigatio.sceneContainerStyle,\n          edgeWidth = _this$props$navigatio.edgeWidth,\n          minSwipeDistance = _this$props$navigatio.minSwipeDistance,\n          hideStatusBar = _this$props$navigatio.hideStatusBar,\n          statusBarAnimation = _this$props$navigatio.statusBarAnimation,\n          gestureHandlerProps = _this$props$navigatio.gestureHandlerProps;\n      var activeKey = navigation.state.routes[navigation.state.index].key;\n      var drawerLockMode = this.props.descriptors[activeKey].options.drawerLockMode;\n      var drawerBackgroundColor = this.getDrawerBackgroundColor();\n      var overlayColor = this.getOverlayColor();\n      var isOpen = drawerLockMode === 'locked-closed' ? false : drawerLockMode === 'locked-open' ? true : this.props.navigation.state.isDrawerOpen;\n      return React.createElement(DrawerGestureContext.Provider, {\n        value: this.drawerGestureRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        }\n      }, React.createElement(Drawer, {\n        open: isOpen,\n        locked: drawerLockMode === 'locked-open' || drawerLockMode === 'locked-closed',\n        onOpen: this.handleDrawerOpen,\n        onClose: this.handleDrawerClose,\n        onGestureRef: this.setDrawerGestureRef,\n        gestureHandlerProps: gestureHandlerProps,\n        drawerType: drawerType,\n        drawerPosition: this.props.navigationConfig.drawerPosition,\n        sceneContainerStyle: sceneContainerStyle,\n        drawerStyle: {\n          backgroundColor: drawerBackgroundColor,\n          width: this.state.drawerWidth\n        },\n        overlayStyle: {\n          backgroundColor: overlayColor\n        },\n        swipeEdgeWidth: edgeWidth,\n        swipeDistanceThreshold: minSwipeDistance,\n        hideStatusBar: hideStatusBar,\n        statusBarAnimation: statusBarAnimation,\n        renderDrawerContent: this.renderNavigationView,\n        renderSceneContent: this.renderContent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        }\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var index = nextProps.navigation.state.index;\n      return {\n        loaded: prevState.loaded.includes(index) ? prevState.loaded : [].concat(_toConsumableArray(prevState.loaded), [index])\n      };\n    }\n  }]);\n\n  return DrawerView;\n}(React.PureComponent);\n\nDrawerView.contextType = ThemeContext;\nDrawerView.defaultProps = {\n  lazy: true\n};\nexport { DrawerView as default };\nvar styles = StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["DrawerView.tsx"],"names":["DrawerView","React","PureComponent","contextType","ThemeContext","defaultProps","lazy","nextProps","prevState","index","loaded","state","drawerWidth","Dimensions","drawerGestureRef","handleDrawerOpen","navigation","DrawerActions","key","handleDrawerClose","updateWidth","renderNavigationView","progress","renderContent","routes","activeKey","descriptor","styles","isFocused","route","StyleSheet","opacity","setDrawerGestureRef","drawerBackgroundColor","ThemeColors","overlayColor","drawerType","sceneContainerStyle","edgeWidth","minSwipeDistance","hideStatusBar","statusBarAnimation","gestureHandlerProps","drawerLockMode","isOpen","backgroundColor","width","content","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Dimensions, StyleSheet, ViewStyle } from 'react-native';\nimport {\n  SceneView,\n  ThemeColors,\n  ThemeContext,\n  NavigationScreenProp,\n} from 'react-navigation';\nimport { ScreenContainer } from 'react-native-screens';\n\nimport * as DrawerActions from '../routers/DrawerActions';\nimport DrawerSidebar from './DrawerSidebar';\nimport DrawerGestureContext from '../utils/DrawerGestureContext';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport Drawer from './Drawer';\nimport {\n  NavigationDrawerState,\n  DrawerContentComponentProps,\n  SceneDescriptorMap,\n} from '../types';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\n\ntype DrawerOptions = {\n  drawerBackgroundColor?: string;\n  overlayColor?: string;\n  minSwipeDistance?: number;\n  drawerPosition: 'left' | 'right';\n  drawerType: 'front' | 'back' | 'slide';\n  drawerLockMode?: 'unlocked' | 'locked-closed' | 'locked-open';\n  keyboardDismissMode?: 'on-drag' | 'none';\n  drawerWidth: number | (() => number);\n  statusBarAnimation: 'slide' | 'none' | 'fade';\n  onDrawerClose?: () => void;\n  onDrawerOpen?: () => void;\n  sceneContainerStyle?: ViewStyle;\n  edgeWidth: number;\n  hideStatusBar?: boolean;\n  style?: ViewStyle;\n  gestureHandlerProps?: React.ComponentProps<typeof PanGestureHandler>;\n};\n\ntype Props = {\n  lazy: boolean;\n  navigation: NavigationScreenProp<NavigationDrawerState>;\n  descriptors: SceneDescriptorMap;\n  navigationConfig: DrawerOptions & {\n    contentComponent?: React.ComponentType<DrawerContentComponentProps>;\n    unmountInactiveRoutes?: boolean;\n    contentOptions?: object;\n  };\n  screenProps: unknown;\n};\n\ntype State = {\n  loaded: number[];\n  drawerWidth: number;\n};\n\n/**\n * Component that renders the drawer.\n */\nexport default class DrawerView extends React.PureComponent<Props, State> {\n  static contextType = ThemeContext;\n  static defaultProps = {\n    lazy: true,\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    const { index } = nextProps.navigation.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index)\n        ? prevState.loaded\n        : [...prevState.loaded, index],\n    };\n  }\n\n  state: State = {\n    loaded: [this.props.navigation.state.index],\n    drawerWidth:\n      typeof this.props.navigationConfig.drawerWidth === 'function'\n        ? this.props.navigationConfig.drawerWidth()\n        : this.props.navigationConfig.drawerWidth,\n  };\n\n  componentDidMount() {\n    Dimensions.addEventListener('change', this.updateWidth);\n  }\n\n  componentWillUnmount() {\n    Dimensions.removeEventListener('change', this.updateWidth);\n  }\n\n  context!: React.ContextType<typeof ThemeContext>;\n\n  private drawerGestureRef = React.createRef<PanGestureHandler>();\n\n  private handleDrawerOpen = () => {\n    const { navigation } = this.props;\n\n    navigation.dispatch(\n      DrawerActions.openDrawer({\n        key: navigation.state.key,\n      })\n    );\n  };\n\n  private handleDrawerClose = () => {\n    const { navigation } = this.props;\n\n    navigation.dispatch(\n      DrawerActions.closeDrawer({\n        key: navigation.state.key,\n      })\n    );\n  };\n\n  private updateWidth = () => {\n    const drawerWidth =\n      typeof this.props.navigationConfig.drawerWidth === 'function'\n        ? this.props.navigationConfig.drawerWidth()\n        : this.props.navigationConfig.drawerWidth;\n\n    if (this.state.drawerWidth !== drawerWidth) {\n      this.setState({ drawerWidth });\n    }\n  };\n\n  private renderNavigationView = ({ progress }: any) => {\n    return (\n      <DrawerSidebar\n        screenProps={this.props.screenProps}\n        drawerOpenProgress={progress}\n        navigation={this.props.navigation}\n        descriptors={this.props.descriptors}\n        contentComponent={this.props.navigationConfig.contentComponent}\n        contentOptions={this.props.navigationConfig.contentOptions}\n        drawerPosition={this.props.navigationConfig.drawerPosition}\n        style={this.props.navigationConfig.style}\n        {...this.props.navigationConfig}\n      />\n    );\n  };\n\n  private renderContent = () => {\n    let { lazy, navigation } = this.props;\n    let { loaded } = this.state;\n    let { routes } = navigation.state;\n\n    if (this.props.navigationConfig.unmountInactiveRoutes) {\n      let activeKey = navigation.state.routes[navigation.state.index].key;\n      let descriptor = this.props.descriptors[activeKey];\n\n      return (\n        <SceneView\n          navigation={descriptor.navigation}\n          screenProps={this.props.screenProps}\n          component={descriptor.getComponent()}\n        />\n      );\n    } else {\n      return (\n        <ScreenContainer style={styles.content}>\n          {routes.map((route, index) => {\n            if (lazy && !loaded.includes(index)) {\n              // Don't render a screen if we've never navigated to it\n              return null;\n            }\n\n            let isFocused = navigation.state.index === index;\n            let descriptor = this.props.descriptors[route.key];\n\n            return (\n              <ResourceSavingScene\n                key={route.key}\n                style={[\n                  StyleSheet.absoluteFill,\n                  { opacity: isFocused ? 1 : 0 },\n                ]}\n                isVisible={isFocused}\n              >\n                <SceneView\n                  navigation={descriptor.navigation}\n                  screenProps={this.props.screenProps}\n                  component={descriptor.getComponent()}\n                />\n              </ResourceSavingScene>\n            );\n          })}\n        </ScreenContainer>\n      );\n    }\n  };\n\n  private setDrawerGestureRef = (ref: PanGestureHandler | null) => {\n    // @ts-ignore\n    this.drawerGestureRef.current = ref;\n  };\n\n  private getDrawerBackgroundColor() {\n    const { drawerBackgroundColor } = this.props.navigationConfig;\n\n    if (drawerBackgroundColor) {\n      return typeof drawerBackgroundColor === 'string'\n        ? drawerBackgroundColor\n        : drawerBackgroundColor[this.context];\n    } else {\n      return ThemeColors[this.context].bodyContent;\n    }\n  }\n\n  private getOverlayColor() {\n    const { overlayColor } = this.props.navigationConfig;\n\n    if (overlayColor) {\n      return typeof overlayColor === 'string'\n        ? overlayColor\n        : overlayColor[this.context];\n    } else {\n      return 'rgba(0,0,0,0.5)';\n    }\n  }\n\n  render() {\n    const { navigation } = this.props;\n    const {\n      drawerType,\n      sceneContainerStyle,\n      edgeWidth,\n      minSwipeDistance,\n      hideStatusBar,\n      statusBarAnimation,\n      gestureHandlerProps,\n    } = this.props.navigationConfig;\n    const activeKey = navigation.state.routes[navigation.state.index].key;\n    const { drawerLockMode } = this.props.descriptors[activeKey].options;\n\n    const drawerBackgroundColor = this.getDrawerBackgroundColor();\n    const overlayColor = this.getOverlayColor();\n\n    const isOpen =\n      drawerLockMode === 'locked-closed'\n        ? false\n        : drawerLockMode === 'locked-open'\n        ? true\n        : this.props.navigation.state.isDrawerOpen;\n\n    return (\n      <DrawerGestureContext.Provider value={this.drawerGestureRef}>\n        <Drawer\n          open={isOpen}\n          locked={\n            drawerLockMode === 'locked-open' ||\n            drawerLockMode === 'locked-closed'\n          }\n          onOpen={this.handleDrawerOpen}\n          onClose={this.handleDrawerClose}\n          onGestureRef={this.setDrawerGestureRef}\n          gestureHandlerProps={gestureHandlerProps}\n          drawerType={drawerType}\n          drawerPosition={this.props.navigationConfig.drawerPosition}\n          sceneContainerStyle={sceneContainerStyle}\n          drawerStyle={{\n            backgroundColor: drawerBackgroundColor,\n            width: this.state.drawerWidth,\n          }}\n          overlayStyle={{ backgroundColor: overlayColor }}\n          swipeEdgeWidth={edgeWidth}\n          swipeDistanceThreshold={minSwipeDistance}\n          hideStatusBar={hideStatusBar}\n          statusBarAnimation={statusBarAnimation}\n          renderDrawerContent={this.renderNavigationView}\n          renderSceneContent={this.renderContent}\n        />\n      </DrawerGestureContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}