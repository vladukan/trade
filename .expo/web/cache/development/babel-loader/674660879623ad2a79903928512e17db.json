{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/satya/Workspace/Callstack/react-navigation-drawer/src/views/DrawerNavigatorItems.tsx\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { SafeAreaView, ThemeContext } from 'react-navigation';\nimport TouchableItem from \"./TouchableItem\";\n\nvar DrawerNavigatorItems = function (_React$Component) {\n  _inherits(DrawerNavigatorItems, _React$Component);\n\n  function DrawerNavigatorItems() {\n    _classCallCheck(this, DrawerNavigatorItems);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DrawerNavigatorItems).apply(this, arguments));\n  }\n\n  _createClass(DrawerNavigatorItems, [{\n    key: \"getActiveTintColor\",\n    value: function getActiveTintColor() {\n      var activeTintColor = this.props.activeTintColor;\n\n      if (!activeTintColor) {\n        return;\n      } else if (typeof activeTintColor === 'string') {\n        return activeTintColor;\n      }\n\n      return activeTintColor[this.context];\n    }\n  }, {\n    key: \"getInactiveTintColor\",\n    value: function getInactiveTintColor() {\n      var inactiveTintColor = this.props.inactiveTintColor;\n\n      if (!inactiveTintColor) {\n        return;\n      } else if (typeof inactiveTintColor === 'string') {\n        return inactiveTintColor;\n      }\n\n      return inactiveTintColor[this.context];\n    }\n  }, {\n    key: \"getActiveBackgroundColor\",\n    value: function getActiveBackgroundColor() {\n      var activeBackgroundColor = this.props.activeBackgroundColor;\n\n      if (!activeBackgroundColor) {\n        return;\n      } else if (typeof activeBackgroundColor === 'string') {\n        return activeBackgroundColor;\n      }\n\n      return activeBackgroundColor[this.context];\n    }\n  }, {\n    key: \"getInactiveBackgroundColor\",\n    value: function getInactiveBackgroundColor() {\n      var inactiveBackgroundColor = this.props.inactiveBackgroundColor;\n\n      if (!inactiveBackgroundColor) {\n        return;\n      } else if (typeof inactiveBackgroundColor === 'string') {\n        return inactiveBackgroundColor;\n      }\n\n      return inactiveBackgroundColor[this.context];\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          items = _this$props.items,\n          activeItemKey = _this$props.activeItemKey,\n          getLabel = _this$props.getLabel,\n          renderIcon = _this$props.renderIcon,\n          onItemPress = _this$props.onItemPress,\n          itemsContainerStyle = _this$props.itemsContainerStyle,\n          itemStyle = _this$props.itemStyle,\n          labelStyle = _this$props.labelStyle,\n          activeLabelStyle = _this$props.activeLabelStyle,\n          inactiveLabelStyle = _this$props.inactiveLabelStyle,\n          iconContainerStyle = _this$props.iconContainerStyle,\n          drawerPosition = _this$props.drawerPosition;\n      var activeTintColor = this.getActiveTintColor();\n      var activeBackgroundColor = this.getActiveBackgroundColor();\n      var inactiveTintColor = this.getInactiveTintColor();\n      var inactiveBackgroundColor = this.getInactiveBackgroundColor();\n      return React.createElement(View, {\n        style: [styles.container, itemsContainerStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        }\n      }, items.map(function (route, index) {\n        var _ref;\n\n        var focused = activeItemKey === route.key;\n        var color = focused ? activeTintColor : inactiveTintColor;\n        var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n        var scene = {\n          route: route,\n          index: index,\n          focused: focused,\n          tintColor: color\n        };\n        var icon = renderIcon(scene);\n        var label = getLabel(scene);\n        var accessibilityLabel = typeof label === 'string' ? label : undefined;\n        var extraLabelStyle = focused ? activeLabelStyle : inactiveLabelStyle;\n        return React.createElement(TouchableItem, {\n          key: route.key,\n          accessible: true,\n          accessibilityLabel: accessibilityLabel,\n          onPress: function onPress() {\n            onItemPress({\n              route: route,\n              focused: focused\n            });\n          },\n          delayPressIn: 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          }\n        }, React.createElement(SafeAreaView, {\n          style: [{\n            backgroundColor: backgroundColor\n          }, styles.item, itemStyle],\n          forceInset: (_ref = {}, _defineProperty(_ref, drawerPosition, 'always'), _defineProperty(_ref, drawerPosition === 'left' ? 'right' : 'left', 'never'), _defineProperty(_ref, \"vertical\", 'never'), _ref),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          }\n        }, icon ? React.createElement(View, {\n          style: [styles.icon, focused ? null : styles.inactiveIcon, iconContainerStyle],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          }\n        }, icon) : null, typeof label === 'string' ? React.createElement(Text, {\n          style: [styles.label, {\n            color: color\n          }, labelStyle, extraLabelStyle],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147\n          }\n        }, label) : label));\n      }));\n    }\n  }]);\n\n  return DrawerNavigatorItems;\n}(React.Component);\n\nDrawerNavigatorItems.defaultProps = {\n  activeTintColor: {\n    light: '#2196f3',\n    dark: '#fff'\n  },\n  activeBackgroundColor: {\n    light: 'rgba(0, 0, 0, .04)',\n    dark: 'rgba(255, 255, 255, .04)'\n  },\n  inactiveTintColor: {\n    light: 'rgba(0, 0, 0, .87)',\n    dark: 'rgba(255, 255, 255, .87)'\n  },\n  inactiveBackgroundColor: {\n    light: 'transparent',\n    dark: 'transparent'\n  }\n};\nDrawerNavigatorItems.contextType = ThemeContext;\nexport { DrawerNavigatorItems as default };\nvar styles = StyleSheet.create({\n  container: {\n    paddingVertical: 4\n  },\n  item: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  icon: {\n    marginHorizontal: 16,\n    width: 24,\n    alignItems: 'center'\n  },\n  inactiveIcon: {\n    opacity: 0.62\n  },\n  label: {\n    margin: 16,\n    fontWeight: 'bold'\n  }\n});","map":{"version":3,"sources":["DrawerNavigatorItems.tsx"],"names":["DrawerNavigatorItems","React","Component","defaultProps","activeTintColor","light","dark","activeBackgroundColor","inactiveTintColor","inactiveBackgroundColor","contextType","ThemeContext","items","activeItemKey","getLabel","renderIcon","onItemPress","itemsContainerStyle","itemStyle","labelStyle","activeLabelStyle","inactiveLabelStyle","iconContainerStyle","drawerPosition","styles","focused","route","color","backgroundColor","scene","index","tintColor","icon","label","accessibilityLabel","extraLabelStyle","StyleSheet","container","paddingVertical","item","flexDirection","alignItems","marginHorizontal","width","inactiveIcon","opacity","margin","fontWeight"],"mappings":";;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;AAEA,SAAA,YAAA,EAAA,YAAA,QAAA,kBAAA;AACA,OAAA,aAAA;;AAMqBA,IAAAA,oB;;;;;;;;;;;yCA0BU;AAAA,UACrBI,eADqB,GACD,KADC,KACD,CADC,eAAA;;AAE3B,UAAI,CAAJ,eAAA,EAAsB;AACpB;AADF,OAAA,MAEO,IAAI,OAAA,eAAA,KAAJ,QAAA,EAAyC;AAC9C,eAAA,eAAA;AAGF;;AAAA,aAAOA,eAAe,CAAC,KAAvB,OAAsB,CAAtB;;;;2CAG6B;AAAA,UACvBI,iBADuB,GACD,KADC,KACD,CADC,iBAAA;;AAE7B,UAAI,CAAJ,iBAAA,EAAwB;AACtB;AADF,OAAA,MAEO,IAAI,OAAA,iBAAA,KAAJ,QAAA,EAA2C;AAChD,eAAA,iBAAA;AAGF;;AAAA,aAAOA,iBAAiB,CAAC,KAAzB,OAAwB,CAAxB;;;;+CAGiC;AAAA,UAC3BD,qBAD2B,GACD,KADC,KACD,CADC,qBAAA;;AAEjC,UAAI,CAAJ,qBAAA,EAA4B;AAC1B;AADF,OAAA,MAEO,IAAI,OAAA,qBAAA,KAAJ,QAAA,EAA+C;AACpD,eAAA,qBAAA;AAGF;;AAAA,aAAOA,qBAAqB,CAAC,KAA7B,OAA4B,CAA5B;;;;iDAGmC;AAAA,UAC7BE,uBAD6B,GACD,KADC,KACD,CADC,uBAAA;;AAEnC,UAAI,CAAJ,uBAAA,EAA8B;AAC5B;AADF,OAAA,MAEO,IAAI,OAAA,uBAAA,KAAJ,QAAA,EAAiD;AACtD,eAAA,uBAAA;AAGF;;AAAA,aAAOA,uBAAuB,CAAC,KAA/B,OAA8B,CAA9B;;;;6BAGO;AAAA,UAAA,WAAA,GAcH,KAdG,KAAA;AAAA,UAELG,KAFK,GAAA,WAAA,CAAA,KAAA;AAAA,UAGLC,aAHK,GAAA,WAAA,CAAA,aAAA;AAAA,UAILC,QAJK,GAAA,WAAA,CAAA,QAAA;AAAA,UAKLC,UALK,GAAA,WAAA,CAAA,UAAA;AAAA,UAMLC,WANK,GAAA,WAAA,CAAA,WAAA;AAAA,UAOLC,mBAPK,GAAA,WAAA,CAAA,mBAAA;AAAA,UAQLC,SARK,GAAA,WAAA,CAAA,SAAA;AAAA,UASLC,UATK,GAAA,WAAA,CAAA,UAAA;AAAA,UAULC,gBAVK,GAAA,WAAA,CAAA,gBAAA;AAAA,UAWLC,kBAXK,GAAA,WAAA,CAAA,kBAAA;AAAA,UAYLC,kBAZK,GAAA,WAAA,CAAA,kBAAA;AAAA,UAaLC,cAbK,GAAA,WAAA,CAAA,cAAA;AAgBP,UAAMnB,eAAe,GAAG,KAAxB,kBAAwB,EAAxB;AACA,UAAMG,qBAAqB,GAAG,KAA9B,wBAA8B,EAA9B;AACA,UAAMC,iBAAiB,GAAG,KAA1B,oBAA0B,EAA1B;AACA,UAAMC,uBAAuB,GAAG,KAAhC,0BAAgC,EAAhC;AAEA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,QAAA,KAAK,EAAE,CAACe,MAAM,CAAP,SAAA,EAAb,mBAAa,CAAb;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EAAA;AAAA;AAAA,OAAA,EACGZ,KAAK,CAALA,GAAAA,CAAU,UAAA,KAAA,EAAA,KAAA,EAA0B;AAAA,YAAA,IAAA;;AACnC,YAAMa,OAAO,GAAGZ,aAAa,KAAKa,KAAK,CAAvC,GAAA;AACA,YAAMC,KAAK,GAAGF,OAAO,GAAA,eAAA,GAArB,iBAAA;AACA,YAAMG,eAAe,GAAGH,OAAO,GAAA,qBAAA,GAA/B,uBAAA;AAGA,YAAMI,KAAK,GAAG;AAAEH,UAAAA,KAAK,EAAP,KAAA;AAASI,UAAAA,KAAK,EAAd,KAAA;AAAgBL,UAAAA,OAAO,EAAvB,OAAA;AAAyBM,UAAAA,SAAS,EAAhD;AAAc,SAAd;AACA,YAAMC,IAAI,GAAGjB,UAAU,CAAvB,KAAuB,CAAvB;AACA,YAAMkB,KAAK,GAAGnB,QAAQ,CAAtB,KAAsB,CAAtB;AACA,YAAMoB,kBAAkB,GACtB,OAAA,KAAA,KAAA,QAAA,GAAA,KAAA,GADF,SAAA;AAEA,YAAMC,eAAe,GAAGV,OAAO,GAAA,gBAAA,GAA/B,kBAAA;AAGA,eACE,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;AACE,UAAA,GAAG,EAAEC,KAAK,CADZ,GAAA;AAEE,UAAA,UAAU,EAFZ,IAAA;AAGE,UAAA,kBAAkB,EAHpB,kBAAA;AAIE,UAAA,OAAO,EAAE,SAAA,OAAA,GAAM;AACbV,YAAAA,WAAW,CAAC;AAAEU,cAAAA,KAAK,EAAP,KAAA;AAASD,cAAAA,OAAO,EAA5BT;AAAY,aAAD,CAAXA;AALJ,WAAA;AAOE,UAAA,YAAY,EAPd,CAAA;AAAA,UAAA,QAAA,EAAA;AAAA,YAAA,QAAA,EAAA,YAAA;AAAA,YAAA,UAAA,EAAA;AAAA;AAAA,SAAA,EASE,KAAA,CAAA,aAAA,CAAA,YAAA,EAAA;AACE,UAAA,KAAK,EAAE,CAAC;AAAEY,YAAAA,eAAe,EAAlB;AAAC,WAAD,EAAsBJ,MAAM,CAA5B,IAAA,EADT,SACS,CADT;AAEE,UAAA,UAAU,GAAA,IAAA,GAAA,EAAA,EAAA,eAAA,CAAA,IAAA,EAAA,cAAA,EAAA,QAAA,CAAA,EAAA,eAAA,CAAA,IAAA,EAEPD,cAAc,KAAdA,MAAAA,GAAAA,OAAAA,GAFO,MAAA,EAAA,OAAA,CAAA,EAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAAA,OAAA,CAAA,EAFZ,IAEY,CAFZ;AAAA,UAAA,QAAA,EAAA;AAAA,YAAA,QAAA,EAAA,YAAA;AAAA,YAAA,UAAA,EAAA;AAAA;AAAA,SAAA,EAQGS,IAAI,GACH,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,UAAA,KAAK,EAAE,CACLR,MAAM,CADD,IAAA,EAELC,OAAO,GAAA,IAAA,GAAUD,MAAM,CAFlB,YAAA,EADT,kBACS,CADT;AAAA,UAAA,QAAA,EAAA;AAAA,YAAA,QAAA,EAAA,YAAA;AAAA,YAAA,UAAA,EAAA;AAAA;AAAA,SAAA,EADG,IACH,CADG,GARP,IAAA,EAmBG,OAAA,KAAA,KAAA,QAAA,GACC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,UAAA,KAAK,EAAE,CACLA,MAAM,CADD,KAAA,EAEL;AAAEG,YAAAA,KAAK,EAFF;AAEL,WAFK,EAAA,UAAA,EADT,eACS,CADT;AAAA,UAAA,QAAA,EAAA;AAAA,YAAA,QAAA,EAAA,YAAA;AAAA,YAAA,UAAA,EAAA;AAAA;AAAA,SAAA,EADD,KACC,CADD,GA7BP,KAUI,CATF,CADF;AAhBN,OAEKf,CADH,CADF;;;;;EA3F8CX,KAAK,CAACC,S,CAAnCF;;AAAAA,oB,CAIZG,YAJYH,GAIG;AACpBI,EAAAA,eAAe,EAAE;AACfC,IAAAA,KAAK,EADU,SAAA;AAEfC,IAAAA,IAAI,EAHc;AACH,GADG;AAKpBC,EAAAA,qBAAqB,EAAE;AACrBF,IAAAA,KAAK,EADgB,oBAAA;AAErBC,IAAAA,IAAI,EAPc;AAKG,GALH;AASpBE,EAAAA,iBAAiB,EAAE;AACjBH,IAAAA,KAAK,EADY,oBAAA;AAEjBC,IAAAA,IAAI,EAXc;AASD,GATC;AAapBG,EAAAA,uBAAuB,EAAE;AACvBJ,IAAAA,KAAK,EADkB,aAAA;AAEvBC,IAAAA,IAAI,EAfc;AAaK;AAbL,CAJHN;AAAAA,oB,CAuBZU,WAvBYV,GAuBEW,YAvBFX;SAAAA,oB;AA+JrB,IAAMwB,MAAM,GAAGY,UAAU,CAAVA,MAAAA,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,eAAe,EAFc;AACpB,GADoB;AAI/BC,EAAAA,IAAI,EAAE;AACJC,IAAAA,aAAa,EADT,KAAA;AAEJC,IAAAA,UAAU,EANmB;AAIzB,GAJyB;AAQ/BT,EAAAA,IAAI,EAAE;AACJU,IAAAA,gBAAgB,EADZ,EAAA;AAEJC,IAAAA,KAAK,EAFD,EAAA;AAGJF,IAAAA,UAAU,EAXmB;AAQzB,GARyB;AAa/BG,EAAAA,YAAY,EAAE;AAKZC,IAAAA,OAAO,EAlBsB;AAajB,GAbiB;AAoB/BZ,EAAAA,KAAK,EAAE;AACLa,IAAAA,MAAM,EADD,EAAA;AAELC,IAAAA,UAAU,EAtBd;AAoBS;AApBwB,CAAlBX,CAAf","sourcesContent":["import * as React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { SafeAreaView, ThemeContext } from 'react-navigation';\nimport TouchableItem from './TouchableItem';\nimport { DrawerNavigatorItemsProps } from '../types';\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nexport default class DrawerNavigatorItems extends React.Component<\n  DrawerNavigatorItemsProps\n> {\n  /* Material design specs - https://material.io/guidelines/patterns/navigation-drawer.html#navigation-drawer-specs */\n  static defaultProps = {\n    activeTintColor: {\n      light: '#2196f3',\n      dark: '#fff',\n    },\n    activeBackgroundColor: {\n      light: 'rgba(0, 0, 0, .04)',\n      dark: 'rgba(255, 255, 255, .04)',\n    },\n    inactiveTintColor: {\n      light: 'rgba(0, 0, 0, .87)',\n      dark: 'rgba(255, 255, 255, .87)',\n    },\n    inactiveBackgroundColor: {\n      light: 'transparent',\n      dark: 'transparent',\n    },\n  };\n\n  static contextType = ThemeContext;\n  context!: React.ContextType<typeof ThemeContext>;\n\n  private getActiveTintColor() {\n    let { activeTintColor } = this.props;\n    if (!activeTintColor) {\n      return;\n    } else if (typeof activeTintColor === 'string') {\n      return activeTintColor;\n    }\n\n    return activeTintColor[this.context];\n  }\n\n  private getInactiveTintColor() {\n    let { inactiveTintColor } = this.props;\n    if (!inactiveTintColor) {\n      return;\n    } else if (typeof inactiveTintColor === 'string') {\n      return inactiveTintColor;\n    }\n\n    return inactiveTintColor[this.context];\n  }\n\n  private getActiveBackgroundColor() {\n    let { activeBackgroundColor } = this.props;\n    if (!activeBackgroundColor) {\n      return;\n    } else if (typeof activeBackgroundColor === 'string') {\n      return activeBackgroundColor;\n    }\n\n    return activeBackgroundColor[this.context];\n  }\n\n  private getInactiveBackgroundColor() {\n    let { inactiveBackgroundColor } = this.props;\n    if (!inactiveBackgroundColor) {\n      return;\n    } else if (typeof inactiveBackgroundColor === 'string') {\n      return inactiveBackgroundColor;\n    }\n\n    return inactiveBackgroundColor[this.context];\n  }\n\n  render() {\n    const {\n      items,\n      activeItemKey,\n      getLabel,\n      renderIcon,\n      onItemPress,\n      itemsContainerStyle,\n      itemStyle,\n      labelStyle,\n      activeLabelStyle,\n      inactiveLabelStyle,\n      iconContainerStyle,\n      drawerPosition,\n    } = this.props;\n\n    const activeTintColor = this.getActiveTintColor();\n    const activeBackgroundColor = this.getActiveBackgroundColor();\n    const inactiveTintColor = this.getInactiveTintColor();\n    const inactiveBackgroundColor = this.getInactiveBackgroundColor();\n\n    return (\n      <View style={[styles.container, itemsContainerStyle]}>\n        {items.map((route, index: number) => {\n          const focused = activeItemKey === route.key;\n          const color = focused ? activeTintColor : inactiveTintColor;\n          const backgroundColor = focused\n            ? activeBackgroundColor\n            : inactiveBackgroundColor;\n          const scene = { route, index, focused, tintColor: color };\n          const icon = renderIcon(scene);\n          const label = getLabel(scene);\n          const accessibilityLabel =\n            typeof label === 'string' ? label : undefined;\n          const extraLabelStyle = focused\n            ? activeLabelStyle\n            : inactiveLabelStyle;\n          return (\n            <TouchableItem\n              key={route.key}\n              accessible\n              accessibilityLabel={accessibilityLabel}\n              onPress={() => {\n                onItemPress({ route, focused });\n              }}\n              delayPressIn={0}\n            >\n              <SafeAreaView\n                style={[{ backgroundColor }, styles.item, itemStyle]}\n                forceInset={{\n                  [drawerPosition]: 'always',\n                  [drawerPosition === 'left' ? 'right' : 'left']: 'never',\n                  vertical: 'never',\n                }}\n              >\n                {icon ? (\n                  <View\n                    style={[\n                      styles.icon,\n                      focused ? null : styles.inactiveIcon,\n                      iconContainerStyle,\n                    ]}\n                  >\n                    {icon}\n                  </View>\n                ) : null}\n                {typeof label === 'string' ? (\n                  <Text\n                    style={[\n                      styles.label,\n                      { color },\n                      labelStyle,\n                      extraLabelStyle,\n                    ]}\n                  >\n                    {label}\n                  </Text>\n                ) : (\n                  label\n                )}\n              </SafeAreaView>\n            </TouchableItem>\n          );\n        })}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingVertical: 4,\n  },\n  item: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  icon: {\n    marginHorizontal: 16,\n    width: 24,\n    alignItems: 'center',\n  },\n  inactiveIcon: {\n    /*\n     * Icons have 0.54 opacity according to guidelines\n     * 100/87 * 54 ~= 62\n     */\n    opacity: 0.62,\n  },\n  label: {\n    margin: 16,\n    fontWeight: 'bold',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}