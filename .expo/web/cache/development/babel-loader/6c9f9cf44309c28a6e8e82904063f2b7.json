{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/satya/Workspace/Callstack/react-navigation-drawer/src/views/DrawerSidebar.tsx\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { NavigationActions } from 'react-navigation';\n\nvar DrawerSidebar = function (_React$PureComponent) {\n  _inherits(DrawerSidebar, _React$PureComponent);\n\n  function DrawerSidebar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DrawerSidebar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DrawerSidebar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.getScreenOptions = function (routeKey) {\n      var descriptor = _this.props.descriptors[routeKey];\n\n      if (!descriptor.options) {\n        throw new Error('Cannot access screen descriptor options from drawer sidebar');\n      }\n\n      return descriptor.options;\n    };\n\n    _this.getLabel = function (_ref) {\n      var focused = _ref.focused,\n          tintColor = _ref.tintColor,\n          route = _ref.route;\n\n      var _this$getScreenOption = _this.getScreenOptions(route.key),\n          drawerLabel = _this$getScreenOption.drawerLabel,\n          title = _this$getScreenOption.title;\n\n      if (drawerLabel) {\n        return typeof drawerLabel === 'function' ? drawerLabel({\n          tintColor: tintColor,\n          focused: focused\n        }) : drawerLabel;\n      }\n\n      if (typeof title === 'string') {\n        return title;\n      }\n\n      return route.routeName;\n    };\n\n    _this.renderIcon = function (_ref2) {\n      var focused = _ref2.focused,\n          tintColor = _ref2.tintColor,\n          route = _ref2.route;\n\n      var _this$getScreenOption2 = _this.getScreenOptions(route.key),\n          drawerIcon = _this$getScreenOption2.drawerIcon;\n\n      if (drawerIcon) {\n        return typeof drawerIcon === 'function' ? drawerIcon({\n          tintColor: tintColor,\n          focused: focused\n        }) : drawerIcon;\n      }\n\n      return null;\n    };\n\n    _this.handleItemPress = function (_ref3) {\n      var route = _ref3.route,\n          focused = _ref3.focused;\n\n      if (focused) {\n        _this.props.navigation.closeDrawer();\n      } else {\n        _this.props.navigation.dispatch(NavigationActions.navigate({\n          routeName: route.routeName\n        }));\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(DrawerSidebar, [{\n    key: \"render\",\n    value: function render() {\n      var ContentComponent = this.props.contentComponent;\n\n      if (!ContentComponent) {\n        return null;\n      }\n\n      var state = this.props.navigation.state;\n\n      if (typeof state.index !== 'number') {\n        throw new Error('The index of the route should be state in the navigation state');\n      }\n\n      return React.createElement(View, {\n        style: [styles.container, this.props.style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        }\n      }, React.createElement(ContentComponent, _extends({}, this.props.contentOptions, {\n        navigation: this.props.navigation,\n        descriptors: this.props.descriptors,\n        drawerOpenProgress: this.props.drawerOpenProgress,\n        items: state.routes,\n        activeItemKey: state.routes[state.index] ? state.routes[state.index].key : null,\n        screenProps: this.props.screenProps,\n        getLabel: this.getLabel,\n        renderIcon: this.renderIcon,\n        onItemPress: this.handleItemPress,\n        drawerPosition: this.props.drawerPosition,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        }\n      })));\n    }\n  }]);\n\n  return DrawerSidebar;\n}(React.PureComponent);\n\nexport default DrawerSidebar;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["DrawerSidebar.tsx"],"names":["DrawerSidebar","React","PureComponent","getScreenOptions","descriptor","getLabel","focused","tintColor","route","drawerLabel","title","renderIcon","drawerIcon","handleItemPress","NavigationActions","routeName","ContentComponent","state","styles","StyleSheet","container","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, ViewStyle } from 'react-native';\nimport {\n  NavigationActions,\n  NavigationRoute,\n  NavigationScreenProp,\n} from 'react-navigation';\nimport Animated from 'react-native-reanimated';\nimport {\n  Scene,\n  NavigationDrawerState,\n  DrawerContentComponentProps,\n  SceneDescriptorMap,\n} from '../types';\n\ntype Props = {\n  contentComponent?: React.ComponentType<DrawerContentComponentProps>;\n  contentOptions?: object;\n  screenProps?: unknown;\n  navigation: NavigationScreenProp<NavigationDrawerState>;\n  descriptors: SceneDescriptorMap;\n  drawerOpenProgress: Animated.Node<number>;\n  drawerPosition: 'left' | 'right';\n  style?: ViewStyle;\n};\n\n/**\n * Component that renders the sidebar screen of the drawer.\n */\nclass DrawerSidebar extends React.PureComponent<Props> {\n  private getScreenOptions = (routeKey: string) => {\n    const descriptor = this.props.descriptors[routeKey];\n\n    if (!descriptor.options) {\n      throw new Error(\n        'Cannot access screen descriptor options from drawer sidebar'\n      );\n    }\n\n    return descriptor.options;\n  };\n\n  private getLabel = ({ focused, tintColor, route }: Scene) => {\n    const { drawerLabel, title } = this.getScreenOptions(route.key);\n    if (drawerLabel) {\n      return typeof drawerLabel === 'function'\n        ? drawerLabel({ tintColor, focused })\n        : drawerLabel;\n    }\n\n    if (typeof title === 'string') {\n      return title;\n    }\n\n    return route.routeName;\n  };\n\n  private renderIcon = ({ focused, tintColor, route }: Scene) => {\n    const { drawerIcon } = this.getScreenOptions(route.key);\n    if (drawerIcon) {\n      return typeof drawerIcon === 'function'\n        ? drawerIcon({ tintColor, focused })\n        : drawerIcon;\n    }\n    return null;\n  };\n\n  private handleItemPress = ({\n    route,\n    focused,\n  }: {\n    route: NavigationRoute;\n    focused: boolean;\n  }) => {\n    if (focused) {\n      this.props.navigation.closeDrawer();\n    } else {\n      this.props.navigation.dispatch(\n        NavigationActions.navigate({ routeName: route.routeName })\n      );\n    }\n  };\n\n  render() {\n    const ContentComponent = this.props.contentComponent;\n\n    if (!ContentComponent) {\n      return null;\n    }\n\n    const { state } = this.props.navigation;\n\n    if (typeof state.index !== 'number') {\n      throw new Error(\n        'The index of the route should be state in the navigation state'\n      );\n    }\n\n    return (\n      <View style={[styles.container, this.props.style]}>\n        <ContentComponent\n          {...this.props.contentOptions}\n          navigation={this.props.navigation}\n          descriptors={this.props.descriptors}\n          drawerOpenProgress={this.props.drawerOpenProgress}\n          items={state.routes}\n          activeItemKey={\n            state.routes[state.index] ? state.routes[state.index].key : null\n          }\n          screenProps={this.props.screenProps}\n          getLabel={this.getLabel}\n          renderIcon={this.renderIcon}\n          onItemPress={this.handleItemPress}\n          drawerPosition={this.props.drawerPosition}\n        />\n      </View>\n    );\n  }\n}\n\nexport default DrawerSidebar;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}