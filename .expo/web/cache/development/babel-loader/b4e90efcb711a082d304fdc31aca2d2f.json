{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"D:\\\\OSPanel\\\\domains\\\\projects\\\\react_native\\\\demo2\\\\node_modules\\\\react-navigation-header-buttons\\\\src\\\\OverflowButton.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { HeaderButton } from \"./HeaderButton\";\nimport { OVERFLOW_BUTTON_TEST_ID } from \"./e2e\";\nimport { defaultOnOverflowMenuPress } from \"./overflowMenuPressHandlers\";\nexport var OverflowButton = function (_React$Component) {\n  _inherits(OverflowButton, _React$Component);\n\n  function OverflowButton() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, OverflowButton);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(OverflowButton)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.setOverflowRef = function (ref) {\n      _this.overflowRef = ref;\n    };\n\n    _this.getOverflowButtonElement = function () {\n      return _this.props.OverflowIcon;\n    };\n\n    _this.showOverflowPopup = function () {\n      var _this$props = _this.props,\n          onOverflowMenuPress = _this$props.onOverflowMenuPress,\n          hiddenButtons = _this$props.hiddenButtons;\n      onOverflowMenuPress({\n        hiddenButtons: hiddenButtons,\n        overflowButtonRef: _this.overflowRef\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(OverflowButton, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          buttonWrapperStyle = _this$props2.buttonWrapperStyle,\n          testID = _this$props2.testID;\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        }\n      }, React.createElement(View, {\n        ref: this.setOverflowRef,\n        style: styles.overflowMenuView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        }\n      }), React.createElement(HeaderButton, {\n        title: OVERFLOW_BUTTON_TEST_ID,\n        getButtonElement: this.getOverflowButtonElement,\n        onPress: this.showOverflowPopup,\n        buttonWrapperStyle: [styles.icon, buttonWrapperStyle],\n        testID: testID,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        }\n      }));\n    }\n  }]);\n\n  return OverflowButton;\n}(React.Component);\nOverflowButton.defaultProps = {\n  testID: OVERFLOW_BUTTON_TEST_ID,\n  onOverflowMenuPress: defaultOnOverflowMenuPress\n};\nvar styles = StyleSheet.create({\n  overflowMenuView: {\n    position: 'absolute',\n    top: -10,\n    right: 0,\n    backgroundColor: 'transparent',\n    width: 1,\n    height: 1\n  },\n  icon: _objectSpread({\n    marginTop: 2\n  }, Platform.select({\n    android: {\n      marginRight: 9,\n      marginLeft: 7\n    }\n  }))\n});","map":{"version":3,"sources":["D:/OSPanel/domains/projects/react_native/demo2/node_modules/react-navigation-header-buttons/src/OverflowButton.js"],"names":["React","HeaderButton","OVERFLOW_BUTTON_TEST_ID","defaultOnOverflowMenuPress","OverflowButton","setOverflowRef","ref","overflowRef","getOverflowButtonElement","props","OverflowIcon","showOverflowPopup","onOverflowMenuPress","hiddenButtons","overflowButtonRef","buttonWrapperStyle","testID","styles","overflowMenuView","icon","Component","defaultProps","StyleSheet","create","position","top","right","backgroundColor","width","height","marginTop","Platform","select","android","marginRight","marginLeft"],"mappings":";;;;;;;;;;;;AAGA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;AAEA,SAASC,YAAT;AAEA,SAASC,uBAAT;AACA,SACEC,0BADF;AAiBA,WAAaC,cAAb;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,UAQEC,cARF,GAQmB,UAACC,GAAD,EAAgB;AAC/B,YAAKC,WAAL,GAAmBD,GAAnB;AACD,KAVH;;AAAA,UA6BEE,wBA7BF,GA6B6B;AAAA,aAAM,MAAKC,KAAL,CAAWC,YAAjB;AAAA,KA7B7B;;AAAA,UA+BEC,iBA/BF,GA+BsB,YAAM;AAAA,wBACuB,MAAKF,KAD5B;AAAA,UAChBG,mBADgB,eAChBA,mBADgB;AAAA,UACKC,aADL,eACKA,aADL;AAExBD,MAAAA,mBAAmB,CAAC;AAAEC,QAAAA,aAAa,EAAbA,aAAF;AAAiBC,QAAAA,iBAAiB,EAAE,MAAKP;AAAzC,OAAD,CAAnB;AACD,KAlCH;;AAAA;AAAA;;AAAA;AAAA;AAAA,6BAYW;AAAA,yBACgC,KAAKE,KADrC;AAAA,UACCM,kBADD,gBACCA,kBADD;AAAA,UACqBC,MADrB,gBACqBA,MADrB;AAGP,aACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,GAAG,EAAE,KAAKX,cAAhB;AAAgC,QAAA,KAAK,EAAEY,MAAM,CAACC,gBAA9C;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,YAAD;AACE,QAAA,KAAK,EAAEhB,uBADT;AAEE,QAAA,gBAAgB,EAAE,KAAKM,wBAFzB;AAGE,QAAA,OAAO,EAAE,KAAKG,iBAHhB;AAIE,QAAA,kBAAkB,EAAE,CAACM,MAAM,CAACE,IAAR,EAAcJ,kBAAd,CAJtB;AAKE,QAAA,MAAM,EAAEC,MALV;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF;AAYD;AA3BH;;AAAA;AAAA,EAAoChB,KAAK,CAACoB,SAA1C;AAAahB,c,CAGJiB,Y,GAAe;AACpBL,EAAAA,MAAM,EAAEd,uBADY;AAEpBU,EAAAA,mBAAmB,EAAET;AAFD,C;AAkCxB,IAAMc,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC/BL,EAAAA,gBAAgB,EAAE;AAChBM,IAAAA,QAAQ,EAAE,UADM;AAEhBC,IAAAA,GAAG,EAAE,CAAC,EAFU;AAIhBC,IAAAA,KAAK,EAAE,CAJS;AAKhBC,IAAAA,eAAe,EAAE,aALD;AAMhBC,IAAAA,KAAK,EAAE,CANS;AAOhBC,IAAAA,MAAM,EAAE;AAPQ,GADa;AAU/BV,EAAAA,IAAI;AACFW,IAAAA,SAAS,EAAE;AADT,KAECC,QAAQ,CAACC,MAAT,CAAgB;AACjBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,WAAW,EAAE,CADN;AAEPC,MAAAA,UAAU,EAAE;AAFL;AADQ,GAAhB,CAFD;AAV2B,CAAlB,CAAf","sourcesContent":["/*\n * @flow\n */\nimport * as React from 'react';\nimport { View, StyleSheet, Platform } from 'react-native';\nimport { HeaderButton, type VisibleButtonProps } from './HeaderButton';\nimport type { ViewStyleProp } from 'react-native/Libraries/StyleSheet/StyleSheet';\nimport { OVERFLOW_BUTTON_TEST_ID } from './e2e';\nimport {\n  defaultOnOverflowMenuPress,\n  type OnOverflowMenuPressParams,\n} from './overflowMenuPressHandlers';\n\nexport type OverflowButtonProps = {\n  onOverflowMenuPress: OnOverflowMenuPressParams => any,\n  OverflowIcon: React.Element<any>,\n};\n\ntype Props = {\n  hiddenButtons: Array<React.Element<any>>,\n  buttonWrapperStyle?: ViewStyleProp,\n  testID: string,\n  ...$Exact<OverflowButtonProps>,\n};\n\nexport class OverflowButton extends React.Component<Props> {\n  overflowRef: ?View;\n\n  static defaultProps = {\n    testID: OVERFLOW_BUTTON_TEST_ID,\n    onOverflowMenuPress: defaultOnOverflowMenuPress,\n  };\n\n  setOverflowRef = (ref: ?View) => {\n    this.overflowRef = ref;\n  };\n\n  render() {\n    const { buttonWrapperStyle, testID } = this.props;\n\n    return (\n      <View>\n        <View ref={this.setOverflowRef} style={styles.overflowMenuView} />\n        <HeaderButton\n          title={OVERFLOW_BUTTON_TEST_ID}\n          getButtonElement={this.getOverflowButtonElement}\n          onPress={this.showOverflowPopup}\n          buttonWrapperStyle={[styles.icon, buttonWrapperStyle]}\n          testID={testID}\n        />\n      </View>\n    );\n  }\n\n  getOverflowButtonElement = () => this.props.OverflowIcon;\n\n  showOverflowPopup = () => {\n    const { onOverflowMenuPress, hiddenButtons } = this.props;\n    onOverflowMenuPress({ hiddenButtons, overflowButtonRef: this.overflowRef });\n  };\n}\n\nconst styles = StyleSheet.create({\n  overflowMenuView: {\n    position: 'absolute',\n    top: -10,\n    // TODO android actually has a little gap on the right of the menu\n    right: 0,\n    backgroundColor: 'transparent',\n    width: 1,\n    height: 1,\n  },\n  icon: {\n    marginTop: 2,\n    ...Platform.select({\n      android: {\n        marginRight: 9,\n        marginLeft: 7,\n      },\n    }),\n  },\n});\n"]},"metadata":{},"sourceType":"module"}